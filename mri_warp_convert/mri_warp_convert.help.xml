<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE help [
<!ENTITY lt "#38;#60;">
<!ENTITY gt "&#62;">
<!ENTITY amp "&#38;#38;">
<!ELEMENT help (name , synopsis , description* , arguments+ , outputs* , example* , bugs* , references* , reporting* , see-also*)*>
<!ELEMENT name (#PCDATA)>
<!ELEMENT synopsis (#PCDATA)>
<!ELEMENT description (#PCDATA)>
<!ELEMENT arguments (positional* , required-flagged* , optional-flagged*)*>
<!ELEMENT positional (intro* , argument* , explanation*)*>
<!ELEMENT required-flagged (intro* , argument* , explanation*)*>
<!ELEMENT optional-flagged (intro* , argument* , explanation*)*>
<!ELEMENT intro (#PCDATA)>
<!ELEMENT argument (#PCDATA)>
<!ELEMENT explanation (#PCDATA)>
<!ELEMENT outputs (output* , explanation*)>
<!ELEMENT output (#PCDATA)>
<!ELEMENT example (#PCDATA)>
<!ELEMENT bugs (#PCDATA)>
<!ELEMENT references (#PCDATA)>
<!ELEMENT reporting (#PCDATA)>
<!ELEMENT see-also (#PCDATA)>
]>

<help>
  <name>mri_warp_convert</name>
  <synopsis>mri_warp_convert [options]</synopsis>
  <description>This program converts non-linear deformation field warp file formats. Some formats may require you to pass an image if the geometry information is missing form the transform file.</description>
  <arguments>
    <positional>
      <intro>None.</intro>
    </positional>
    <required-flagged>
      <intro>Exactly one input is required:</intro>
      <argument>--inm3z &lt;in.m3z&gt;</argument>
      <explanation>input M3Z warp</explanation>
      <argument>--inmgzwarp &lt;inwarp.mgz&gt;</argument>
      <explanation>input mgz warp (Freesurfer 3D morph in mgz format)</explanation>       
      <argument>--infsl &lt;in.nii.gz&gt;</argument>
      <explanation>input FSL warp (recommend to use with --insrcgeom)</explanation>
      <argument>--inspm &lt;y_rinput.nii&gt;</argument>
      <explanation>input SPM warp (use use with --insrcgeom), data format is either abs-crs (default) or abs-ras (use --inwarpformat to specify)</explanation>
      <argument>--inlps, --initk &lt;in.nii.gz&gt;</argument>
      <explanation>input LPS-to-LPS displacement field (e.g. ITK, ANTs)</explanation>
      <argument>--inras &lt;in.nii.gz&gt;</argument>
      <explanation>input RAS-to-RAS displacement field (e.g. NiftyReg)</explanation>
      <argument>--invox &lt;in.mgz&gt;</argument>
      <explanation>input file with displacements in source-voxel space</explanation>
      <intro>Exactly one output is required:</intro>
      <argument>--outm3z &lt;out.m3z&gt;</argument>
      <explanation>output warp (M3Z Freesurfer format)</explanation>
      <argument>--outmgzwarp &lt;outwarp.mgz&gt;</argument>
      <explanation>output mgz warp (Freesurfer 3D morph in mgz format)</explanation>      
      <argument>--outfsl &lt;out.nii.gz&gt;</argument>
      <explanation>output warp (FSL format)</explanation>
      <argument>--outlps, --outitk &lt;out.nii.gz&gt;</argument>
      <explanation>output LPS-to-LPS displacement field (e.g. ITK, ANTs)</explanation>
      <argument>--outras &lt;out.nii.gz&gt;</argument>
      <explanation>output RAS-to-RAS displacement field (e.g. NiftyReg)</explanation>
      <argument>--outvox &lt;out.mgz&gt;</argument>
      <explanation>output file with displacements in source-voxel space</explanation>
    </required-flagged>
    <optional-flagged>
      <intro>While M3Z contains src geometry information, other file formats are missing this information and you need to explicitly pass it:</intro>
      <argument>-g, --insrcgeom &lt;geom.mgz&gt;</argument>
      <explanation>specify source image geometry (moving volume)</explanation>
      <argument>-d, --downsample</argument>
      <explanation>Downsample output M3Z to spacing of 2.</explanation>
      <argument>-lta1 LTA (or -lta1-inv)</argument>
      <explanation> Create composite morph for warping a source image -> LTA1 -> GCAM -> LTA2 -> atlas/destination image</explanation>
      <argument>-lta2 LTA (or -lta2-inv)</argument>
      <explanation> Create composite morph for warping a source image -> LTA1 -> GCAM -> LTA2 -> atlas/destination image</explanation>
      <argument>--inwarpformat inwarp-format</argument>
      <explanation>specify warp data format: abs-crs, disp-crs, abs-ras, or disp-ras (default is abs-crs)</explanation>      
      <argument>--outwarpformat outwarp-format</argument>
      <explanation>specify warp data format: abs-crs, disp-crs, abs-ras, or disp-ras (default is abs-crs)</explanation>
    </optional-flagged>
  </arguments>
  <example>Convert FSL warp to M3Z (FreeSurfer):
    mri_warp_convert --infsl fsl.nii.gz --outm3z out.m3z --insrcgeom src.nii.gz</example>
  <example>Convert ITK warp (e.g. ANTs) to M3Z (FreeSurfer):
    mri_warp_convert --initk itk.nii.gz --outm3z out.m3z --insrcgeom src.nii.gz</example>
  <example>Convert ANTS antsRegistrationSyN.sh or antsRegistrationSyNQuick.sh output to M3Z (FreeSurfer):
    antsRegistrationSyNQuick.sh -d 3 -m mov.mgz -f targ.mgz -o reg. 
    ConvertTransformFile 3 ants.reg0GenericAffine.mat      ants.reg0GenericAffine.txt --hm --ras
    lta_convert --src mov.mgz --trg targ.mgz --inniftyreg ants.reg0GenericAffine.txt --outlta ants.reg0GenericAffine.lta
    mri_warp_convert --lta1-inv ants.reg0GenericAffine.lta --initk ants.reg1Warp.nii.gz --outm3z out.m3z --insrcgeom targ.mgz
      Note that the insrcgeom is the target, not the mov; this is needed to work with --lta1-inv.
  </example>
  <example>Convert M3Z (FreeSurfer) to ITK warp (e.g. ANTs):
    mri_warp_convert --inm3z in.m3z --outitk out.nii.gz</example>
  <example>Convert M3Z (FreeSurfer) to mgz warp (FreeSurfer) in absolute CRS:
    mri_warp_convert --inm3z in.m3z --outmgzwarp outwarp.mgz --outwarpformat abs-crs</example>  
</help>
